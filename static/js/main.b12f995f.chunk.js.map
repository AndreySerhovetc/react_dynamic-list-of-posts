{"version":3,"sources":["components/Loader/Loader.tsx","api/api.ts","components/PostsList/PostsList.tsx","api/posts.ts","components/NewCommentForm/NewCommentForm.tsx","api/comments.ts","components/PostDetails/PostDetails.tsx","App.tsx","api/users.ts","index.tsx"],"names":["Loader","className","BASE_URL","request","url","options","fetch","then","response","ok","Error","statusText","json","PostsList","props","selectedUserId","selectedPostId","changePostId","useState","posts","setPosts","loader","setLoader","useEffect","userId","postsFromServer","data","length","map","post","body","type","onClick","postId","id","NewCommentForm","onAdd","name","setName","email","setEmail","setBody","addComment","event","preventDefault","onSubmit","placeholder","value","onChange","target","getComments","PostDetails","selectedPost","setSelectedPost","comments","setComments","isHide","setHide","commentsFromApi","removeComment","commentId","method","deleteComment","commentsFromServer","title","comment","newComment","headers","JSON","stringify","postNewComment","App","users","setUsers","setSelectUserId","setPostId","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b12f995f.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string, options = {}) => {\n  return fetch(`${BASE_URL}${url}`, options)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n","import React, { useState, useEffect } from 'react';\nimport './PostsList.scss';\nimport { Loader } from '../Loader/Loader';\nimport { getAllPosts, getUserPosts } from '../../api/posts';\n\ninterface Props {\n  selectedUserId: number;\n  selectedPostId: number;\n  changePostId: (selectPost: number) => void;\n}\n\nexport const PostsList: React.FC<Props> = (props) => {\n  const { selectedUserId, selectedPostId, changePostId } = props;\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [loader, setLoader] = useState(false);\n\n  useEffect(() => {\n    setLoader(false);\n    if (selectedUserId === 0) {\n      getAllPosts()\n        .then(data => {\n          setPosts(data);\n          setLoader(true);\n        });\n\n      return;\n    }\n\n    getUserPosts(selectedUserId)\n      .then(postsFromServer => {\n        setPosts(postsFromServer);\n        setLoader(true);\n      });\n  }, [selectedUserId]);\n\n  if (!posts) {\n    return (\n      <div>Post not found</div>\n    );\n  }\n\n  const handleChange = (postId: number) => {\n    if (selectedPostId === postId) {\n      changePostId(0);\n    } else {\n      changePostId(postId);\n    }\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      {posts.length === 0 && (\n        <h3>Selected user has not posted anything yet</h3>\n      )}\n      {\n        loader ? (\n          <ul className=\"PostsList__list\">\n            {posts.map(post => (\n              <li\n                className=\"PostsList__item\"\n                key={post.id}\n              >\n                <div>\n                  <b>{`[User#${post.userId}]: `}</b>\n                  {post.body}\n                </div>\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => (\n                    handleChange(post.id)\n                  )}\n                >\n                  {selectedPostId === post.id ? 'Close' : 'Open'}\n\n                </button>\n              </li>\n            ))}\n          </ul>\n        )\n\n          : <Loader />\n      }\n    </div>\n  );\n};\n","import { request } from './api';\n\nexport const getAllPosts = (): Promise<Post[]> => {\n  return request('/posts');\n};\n\nexport const getUserPosts = (userId: number): Promise<Post[]> => {\n  return request(`/posts/?userId=${userId}`);\n};\n\nexport const getSelectedPosts = (postId: number): Promise<Post> => {\n  return request(`/posts/${postId}`);\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  selectedPostId: number;\n  onAdd: (newComment: Comment) => void\n}\n\nexport const NewCommentForm: React.FC<Props> = (props) => {\n  const { selectedPostId, onAdd } = props;\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const reset = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  const addComment = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const newComment = {\n      name,\n      email,\n      body,\n      postId: selectedPostId,\n    };\n\n    onAdd(newComment as Comment);\n    reset();\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={addComment}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(event) => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(event) => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={(event) => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n        onSubmit={addComment}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import { request } from './api';\n\nexport const getComments = (postId: number): Promise<Comment[]> => {\n  return request(`/comments?postId=${postId}`);\n};\n\nexport const postNewComment = (newComment: Partial<Comment>) => {\n  return request('/comments', {\n    method: 'Post',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newComment),\n  });\n};\n\nexport const deleteComment = (commentId: number) => {\n  return request(`/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n};\n","import React, { useEffect, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getSelectedPosts } from '../../api/posts';\nimport { getComments, postNewComment, deleteComment } from '../../api/comments';\nimport './PostDetails.scss';\n\ninterface Props {\n  selectedPostId: number;\n}\n\nexport const PostDetails: React.FC<Props> = (props) => {\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[] | null>(null);\n  const [isHide, setHide] = useState(true);\n  const { selectedPostId } = props;\n\n  useEffect(() => {\n    getSelectedPosts(selectedPostId)\n      .then(post => (\n        setSelectedPost(post)\n      ));\n\n    getComments(selectedPostId)\n      .then(commentsFromApi => (\n        setComments([...commentsFromApi])\n      ));\n  }, [selectedPostId]);\n\n  const handleClick = () => {\n    setHide(!isHide);\n  };\n\n  if (selectedPostId === 0) {\n    return (\n      <div>Select a post</div>\n    );\n  }\n\n  if (!selectedPost) {\n    return (\n      <div>Post not found</div>\n    );\n  }\n\n  if (!comments) {\n    return (\n      <span>Comments not found</span>\n    );\n  }\n\n  const addNewComment = (newComment: Partial<Comment>) => {\n    postNewComment(newComment)\n      .then(() => getComments(selectedPostId))\n      .then(commentsFromServer => setComments(commentsFromServer));\n  };\n\n  const removeComment = (commentId: number) => {\n    deleteComment(commentId)\n      .then(() => getComments(selectedPostId))\n      .then(commentsFromServer => setComments(commentsFromServer));\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n      <section className=\"PostDetails__post\">\n        <p>{selectedPost.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={handleClick}\n        >\n          {isHide ? (\n            `Hide ${comments.length} comments`\n          ) : (\n            `Show ${comments.length} comments`\n          )}\n        </button>\n        {isHide && (\n          <ul className=\"PostDetails__list\">\n            {comments.map(comment => (\n              <li\n                className=\"PostDetails__list-item\"\n                key={comment.id}\n              >\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => removeComment(comment.id)}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            selectedPostId={selectedPostId}\n            onAdd={addNewComment}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/users';\n\nconst App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUserId, setSelectUserId] = useState(0);\n  const [postId, setPostId] = useState(0);\n\n  useEffect(() => {\n    getUsers()\n      .then(response => {\n        setUsers(response);\n      });\n  }, []);\n\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectUserId(+event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={handleChange}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option\n                value={user.id}\n                key={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <>\n            <PostsList\n              changePostId={setPostId}\n              selectedPostId={postId}\n              selectedUserId={selectedUserId}\n            />\n          </>\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails\n            selectedPostId={postId}\n          />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { request } from './api';\n\nexport const getUsers = (): Promise<User[]> => {\n  return request('/users');\n};\n\nexport const getUser = (userId: number): Promise<User[]> => {\n  return request(`/users/${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}